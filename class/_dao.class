<?

include("_set.class");

class DAO extends setDB{
	private $db;
	private $state;
	private $key = "";
	private $val = "";
	private $orderBy = "";
	private $groupBy="";
	private $addKey = array();
	private $addVal = array();
	private $count="";
	private $all="false";
	private $iterater=0;
	private $dml= "";
	private $debug ="false";
	private $lastInsertId = "";

	public function __construct($conn="",$user="",$pass=""){
		//DB登録
		if($conn==""&&$pass==""&&$user==""){
			try{
				$db = new PDO(setDB::conn,setDB::user, setDB::pass,array(PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING));
				$this->db = $db;
			} catch(PDOException $e){
				echo  "接続エラー:{$e->getMessage()}";
			}
		} elseif ($conn!=""&&$user=""&&$pass="") {

			try{
				$db = new PDO($conn);
				$this->db = $db;
			} catch(PDOException $e){
				echo  "接続エラー:{$e->getMessage()}";
			}

		} else {
			
			try{
				$db = new PDO($conn,$user,$pass);
				$this->db = $db;
			} catch(PDOException $e){
				print $conn;
				print $user;
				print $pass;
				echo  "VPN SQL 接続エラー:{$e->getMessage()}";
			}
		}
	}

	public function getDbConnection(){
		return $this->db;
	}

	public function encrypt(){
		$this->state = "encrypt";
		return $this;
	}

	public function decrypt(){
		$this->state = "decrypt";
		return $this;
	}

	public function debug(){
		$this->debug = "true";
	}

	public function req($req){
			if($this->state == "encrypt")
				$req = openssl_encrypt($req,'aes-256-ecb',setDB::pass);
			if($this->state == "decrypt")
				$req = openssl_decrypt($req,'aes-256-ecb',setDB::pass);
			return $req;
	}

	public function joinTable(String $t1,String $t2){

		$sql="SELECT * FROM ".$t1." LEFT OUTER JOIN " . $t2." ON " .$t1.".".$this->key." = ".$t2.".".$this->key." where ".$t1.".".$this->key."=" .$this->val;

		$stmt = $this->db->query($sql);
		$this->key = "";
		$this->val = "";
		$result = $stmt->fetchall();
		$this->count = count($result);
		return $result[0];
	}

	public function directQuery(String $sql){
		if($this->debug=="true"){
			print "\r\ndebug>>>>>>>>\r\n " .$sql . "\r\n";
		}
		$stmt = $this->db->query($sql);
		$result = $stmt->fetchall();
		$this->count = count($result);
		return $result;
	}
	
	public function getInsertId(){
		return $this->lastInsertId;
	}

	public function last_insert_id($tbl){
		$stmt = $this->db->query("select max(req) as max_id from ".$tbl);
		$result = $stmt->fetchall();
		return $result[0]['max_id'];
	}

	public function insert(String $table){
		$sql = "INSERT INTO ".$table ."(";

		foreach($this->addKey as $key ){
			$sql .= $key.",";
		}
		$sql = rtrim($sql, ',');
		$sql .= ") VALUES (";
		foreach($this->addVal as $val ){
			$sql .= "'". $val ."',";
		}
		$sql = rtrim($sql, ',');
		$sql .= ")";

		if($this->debug=="true"){
			print $sql;
		}
		$this->db->query($sql);

		
		$this->lastInsertId = $this->db->lastInsertId();

	}

	public function update(String $table){
		$sql = "UPDATE " . $table ." SET ";

		$key = $this->addKey;
		$val = $this->addVal;
		$bool = $this->noQuote;
		for($i=0;Current($key) != null;$i++){
			if( $bool[$i] == null){
				$sql .= current($key) ."='" . current($val)."'";
			} elseif($bool[$i] == "noQuote") {
				$sql .= current($key) ."=" . current($val);
			}

			if(Next($key)!="") {
				Next($val);
				$sql .= ",";
			}
		}
		$sql .= " where " .$this->getKey();
		if($this->debug=="true"){
			print $sql;
		}
		$this->db->query($sql);

	} 

	public function delete(String $t1 , String $debug=""){
		$sql="DELETE FROM " . $t1 . " where " .$this->getKey();

		if($debug=="debug") {
			print $sql;
			return false;
		}
		if($this->debug=="true"){
			print $sql;
		}
		$this->db->query($sql);
	}

	public function queryCount(){
		return $this->count;
	}
	
	public function all(){
		$this->all = "true";
		return $this;
	}

	public function cls(){
		$this->key = "";
		$this->val = "";
		$this->orderBy ="";
		$this->addKey = array();
		$this->addVal = array();
		$this->_addKey = array();
		$this->_addVal = array();
		return $this;
	}

	final public function __call(String $name, Array $arguments){

		$sql="select * from ".$name." where req='".$arguments[0]."'";
		if (empty($arguments)) {
			$sql="select * from ".$name;
		}

		if(isSet($arguments[1]) !=""){
			$sql="select * from ".$name." where ".$arguments[0]."='".$arguments[1]."'";
		}	

		if($this->val != ""){
			$sql .= " and " . $this->getKey();
		}
		
		if($this->orderBy != ""){
			$sql .= $this->getOrderBy();
		
		}

		if($this->debug=="true"){
			print $sql;
		}
		$stmt = $this->db->query($sql);
		$this->key ="";
		$this->val = "";
		$this->count = $stmt->rowCount();



		if($this->all=="true"){
			return $stmt->fetchall();
		} else{
			return $stmt->fetchall()[0];
		}

	}

    public function setKey(String $key,String $val){

		if($this->key != "") {
			if($this->iterater == 0){
				$this->_addKey[] = $this->key;
				$this->_addVal[] = $this->val;
			}
			$this->_addKey[] = $key;
			$this->_addVal[] = $val;
			$this->iterater = $this->iterater + 1;
		} else {
			$this->key = $key;
			$this->val = $val;
		}

    }

	private function getKey():String{

		$where = $this->key . "=" . "'" . $this->val ."'";
		if($this->iterater > 0){
			$where = $this->_addKey[0] . "=" . "'" . $this->_addVal[0] ."'";
			for($i=1;Count($this->_addKey) > $i;$i++){
				$where .= " and " .$this->_addKey[$i] . "=" . "'" . $this->_addVal[$i] ."'";
			}
		}
			

		return $where;
	}


	public function setVal(String $key,String $val,String $bool=""){
		$this->addKey[] = $key;
		$this->addVal[] = $val;
		$this->noQuote[] = $bool;
	}

	public function setGroup(String $val){
		$this->groupBy = " group by " . "(" . $val . ")"; 
	}

	public function getGroupBy(){
		return $this->groupBy;
	}

	public function orderBy(String $key,String $val){
		$this->orderBy = " order by " . $key . " " .$val; 
	}

	public function getOrderBy(){
		return $this->orderBy;
	}

	public function begin(){
		$this->db->beginTransaction();
	}

	public function commit(){
		$this->db->commit();
	}

	public function rollback(){
		$this->db->rollBack();
	}

}

?>